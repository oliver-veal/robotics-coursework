##################################################################################
#                                   TASK A.i  
##################################################################################

def expand_map(img, robot_width):
    robot_px = int(robot_width * scale)   # size of the robot in pixels x axis
    ############################################################### TASK A
    # SQUARE MASK
    # create a square array of ones of the size of the robot
    robot_mask = np.ones((robot_px, robot_px))

    expanded_map = binary_dilation(img, robot_mask)
    
    return expanded_map
 

##################################################################################
#                                   TASK A.ii   
##################################################################################

def circle_array(arr, r):
    width = len(arr)
    offset = math.ceil(-(width / 2)) + (0.5 if width % 2 == 0 else 0)
    r2 = r**2
    for i in range(width):
        for j in range(width):
            if (i+offset)**2 + (j+offset)**2 > r2:
                arr[i][j] = 0

def expand_map(img, robot_width):
    robot_px = int(robot_width * scale)   # size of the robot in pixels x axis
    ############################################################### TASK A
    # SQUARE MASK
    robot_mask = np.ones((robot_px, robot_px))
    
    # CIRCULAR MASK
    circle_array(robot_mask, robot_px / 2) 
    expanded_map = binary_dilation(img, robot_mask)
    
    return expanded_map 

##################################################################################
#                                   TASK B.i  
##################################################################################

def setup_waypoints(self):
    ############################################################### TASK B
    # Create an array of waypoints for the robot to navigate via to reach the goal    
    waypoints = np.array([[0.0, -6.0],
                        [1.97, -3.78],
                        [5.97, -1.28],
                        [7.78, 4.59],
                        [8.0, 8.0]])  # fill this in with your waypoints

    waypoints = np.vstack([initial_position, waypoints, self.goal])
    pixel_waypoints = self.map_position(waypoints)
    
    print('Waypoints:\n', waypoints)
    print('Waypoints in pixel coordinates:\n', pixel_waypoints)
    
    self.waypoints = waypoints
    self.waypoint_index = 0

##################################################################################
#                                   TASK B.ii   
##################################################################################

def setup_waypoints(self):
     ... 

    total_len = 0
    for i in range(len(waypoints) - 1):
        total_len += sqrt((waypoints[i + 1][0] - waypoints[i][0])**2 + (waypoints[i + 1][1] - waypoints[i][1])**2)
    print(total_len)

    ...

##################################################################################
#                                   TASK C.i   
##################################################################################



##################################################################################
#                                   TASK C.ii   
##################################################################################



##################################################################################
#                                   TASK D.i   
##################################################################################



##################################################################################
#                                   TASK D.ii   
##################################################################################



##################################################################################
#                                   TASK E.i  
##################################################################################



##################################################################################
#                                   TASK E.ii   
##################################################################################



##################################################################################
#                                   TASK E.iii   
##################################################################################



##################################################################################
#                                   TASK F.i   
##################################################################################



##################################################################################
#                                   TASK F.ii   
##################################################################################