def potential_field(self):
      ############################################################### TASK C ELITE VERISON
      
      for i in range(1,50,2):
         for j in range(50,1000,50):
              
            print(i,j)
      
            complete = False
            deniro_position = np.array([0, 0])

            map_array_x_negative = []
            map_array_y_negative = []
             
            map_array_x_positive = []
            map_array_y_positive = []
                
            map_array_x_combined = []
            map_array_y_combined = []
               
            map_array = []
                
            resolution = 10
                
            #2,4,8,10,16
                
            window = int(320/resolution)
                
            start = -window
            end = window
                
            factor = end/8
                
            for y in range(start,end):
                
               map_array_x_negative_x = []
               map_array_y_negative_x = []
                    
               map_array_x_positive_x = []
               map_array_y_positive_x = []
                    
               map_array_x_combined_x = []
               map_array_y_combined_x = []
                    
               map_array_x = []
                    
               for x in range(start,end):
                  deniro_position = np.array([x/factor,y/factor])
                
                  # compute the positive force attracting the robot towards the goal
                  # vector to goal position from DE NIRO
                  goal_vector = goal - deniro_position
                  # distance to goal position from DE NIRO
                  distance_to_goal = np.linalg.norm(goal_vector)
                  # unit vector in direction of goal from DE NIRO
                  pos_force_direction = goal_vector / distance_to_goal
                        
                  # potential function
                  pos_force_magnitude = 1     # your code here!
                  # tuning parameter
                  K_att = i     # tune this parameter to achieve desired results
                  
                  # positive force
                  positive_force = K_att * pos_force_direction * pos_force_magnitude  # normalised positive force
                  
                  # compute the negative force repelling the robot away from the obstacles
                  obstacle_pixel_locations = np.argwhere(self.pixel_map == 1)
                  # coordinates of every obstacle pixel
                  obstacle_pixel_coordinates = np.array([obstacle_pixel_locations[:, 1], obstacle_pixel_locations[:, 0]]).T
                  # coordinates of every obstacle pixel converted to world coordinates
                  obstacle_positions = self.world_position(obstacle_pixel_coordinates)
                  
                  # vector to each obstacle from DE NIRO
                  obstacle_vector = obstacle_positions - deniro_position   # vector from DE NIRO to obstacle
                  # distance to obstacle from DE NIRO
                  distance_to_obstacle = np.linalg.norm(obstacle_vector, axis=1).reshape((-1, 1))  # magnitude of vector
                  # unit vector in direction of obstacle from DE NIRO
                  force_direction = obstacle_vector / distance_to_obstacle   # normalised vector (for direction)
                  
                  # potential function
                  force_magnitude = -(1/distance_to_obstacle)   # your code here!
                  # tuning parameter
                  K_rep = j    # tune this parameter to achieve desired results
                  
                  # force from an individual obstacle pixel
                  obstacle_force = force_direction * force_magnitude
                  # total negative force on DE NIRO
                  negative_force = K_rep * np.sum(obstacle_force, axis=0) / obstacle_pixel_locations.shape[0]

                  # Uncomment these lines to visualise the repulsive force from each obstacle pixel
                  # Make sure to comment it out again when you run the motion planner fully
                  # plotskip = 10   # only plots every 10 pixels (looks cleaner on the plot)S
                  # plt.imshow(self.pixel_map, vmin=0, vmax=1, origin='lower')
                  # plt.quiver(obstacle_pixel_coordinates[::plotskip, 0], obstacle_pixel_coordinates[::plotskip, 1],
                  # obstacle_force[::plotskip, 0] * self.xscale, obstacle_force[::plotskip, 1] * self.yscale)
                  # plt.show()

                  
                  map_array_x_negative_x.append(negative_force[0])
                  map_array_y_negative_x.append(negative_force[1])
                  
                  map_array_x_positive_x.append(positive_force[0])
                  map_array_y_positive_x.append(positive_force[1])
                  
                  map_array_x_combined_x.append(negative_force[0] + positive_force[0])
                  map_array_y_combined_x.append(negative_force[1] + positive_force[1])

                        
               map_array_x_negative.append(map_array_x_negative_x)
               map_array_y_negative.append(map_array_y_negative_x)
               
               map_array_x_positive.append(map_array_x_positive_x)
               map_array_y_positive.append(map_array_y_positive_x)
               
               map_array_x_combined.append(map_array_x_combined_x)
               map_array_y_combined.append(map_array_y_combined_x)

            neg_map_x = np.array(map_array_x_negative)
            neg_map_y = np.array(map_array_y_negative)
            
            pos_map_x = np.array(map_array_x_positive)
            pos_map_y = np.array(map_array_y_positive)
            
            com_map_x = np.array(map_array_x_combined)
            com_map_y = np.array(map_array_y_combined)

                
            X = np.arange(0, 320)
            Y = np.arange(0, 320)

            X,Y = np.meshgrid(X,Y)
            U = com_map_x
            V = com_map_y

                
            plt.imshow(self.pixel_map, vmin=0, vmax=1, origin='lower', cmap='Greys')
            
            res_over_2 = resolution/2
            
            X, Y = np.meshgrid(np.arange(0, 320, res_over_2), np.arange(0,320, res_over_2))
            
            print(com_map_x.shape)
            print(U.shape)

            plt.quiver(X,Y,U,V,angles='xy', scale_units='xy', scale=0.2)
             
            plt.savefig("linear_K_att:"+ str(K_att) + " K_rep:" + str(K_rep) + ".png", dpi=300)
            
            plt.clf()
       
      # if need to stop loop
      #input("enter to continue")
      
      # Reference velocity is the resultant force
      vref = positive_force + negative_force
      
      # If the goal has been reached, stop
      if distance_to_goal < 0.05:
          vref = np.array([0, 0])
          complete = True
      return vref, complete          